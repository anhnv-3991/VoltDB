#!/usr/bin/expect -f

# run this script from the trunk of the c++ client library directory

# if no buildstring is specified, this doesn't check the version number
if { $argc != 1 } {
  puts "Please pass the build string as one single argument"
  exit 1
}
set buildstring [lindex $argv 0]
puts "Build string is: $buildstring"

set timeout 150
proc abort {} {
  # temporary file cleanup goes here, if any
  exit 1
}

proc start_server { buildstring } {
  puts $buildstring
  spawn ant catalog server
  set id $spawn_id
  expect -i $id eof abort timeout abort "INFO HOST: $buildstring"
  expect -i $id eof abort timeout abort "Server completed initialization."
  # wait for server to really be ready
  sleep 1
  return $id
}

cd ../../build-centos/trunk/examples/voter
set server_id [ start_server $buildstring ]
cd ../../../../

cd cpp-clients/trunk
spawn ./clientvoter
set client_id $spawn_id
# this app doesn't really do much
expect -i $client_id eof abort timeout abort "Successfully connected and initialized the database."
expect -i $client_id timeout abort eof

close -i $server_id
cd ../../

cd build-centos/trunk/examples/helloworld
set server_id [ start_server $buildstring ]
cd ../../../../

cd cpp-clients/trunk/HelloWorld
spawn ./HelloWorld
set client_id $spawn_id
expect -i $client_id eof abort timeout abort "Column names: HELLO, WORLD"
expect -i $client_id eof abort timeout abort "\"Hola\", \"Mundo\""
expect -i $client_id timeout abort eof

close -i $server_id
cd ../../../

cd build-centos/trunk/examples/helloworld
set server_id [ start_server $buildstring ]
cd ../../../../

cd cpp-clients/trunk/AsyncHelloWorld
spawn ./AsyncHelloWorld
set client_id $spawn_id
expect -i $client_id timeout abort eof

close -i $server_id
cd ../../../

exit 0
